#lang racket
;;Exercise 1
(cons 3 '(4))
(cons 1 '(2 3))
(cons 'a '((b c)))
(cons 1 '())
(cons 2 '((3 (4))))

;;Excercise 2

(define L '(1 2 3 4 5))
(cadr L) ;;car+cdr -> second
(caddr L)
(cadddr L)
(cadddr (cdr L))

(define LL '(1 (2 3 4) (5)))

(car (cadr LL))
(car (caddr LL))

;;Excercise 3

(define (getRange x y)
  
                  (if (< y x) 0( begin
                      (define L '())
                      (for ([i (in-range x y)])
                        (cons i '())
                        )))
                  ) 
                  
  )
                  






